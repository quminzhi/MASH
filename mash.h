/**
 * @file mash.c
 * @author Minzhi Qu (quminzhi@gmail.com)
 * @brief MASH Shell will 'mash' three Linux command requests together and run them against the
 * same input file in paraller. 
 * @version 0.1
 * @date 2021-11-10
 * 
 * @copyright Copyright (c) 2021
 */

#ifndef MASH_H
#define MASH_H

#define DEBUG 0

// Global Defines
#define IN
#define OUT
#define true 1
#define false 0
#define nullptr NULL
#define STATUS unsigned int
#define NUM_OF_JOBS 3

// UI Process
#define MESSAGE_MAX_SIZE 10000
#define USER_INPUT_MAX_SIZE 255

// Worker Process
#define CACHE_NAME_SIZE 20
#define COMMAND_MAX_SIZE 20;
const char* target_commands[] = {
    "grep", "sed", "ls", "wc", "as", 
};
#define SIZE_OF_TARGET_COMMAND (sizeof(target_commands) / sizeof(const char*))

// Output Format
#define SIZE_OF_DELIMITER_LINE 80
#define KRED "\x1B[31m"
#define KGRN "\x1B[32m"
#define KYEL "\x1B[33m"
#define KBLU "\x1B[34m"
#define RESET "\033[0m"

/**
 * @brief MsgCollector
 * 
 * @param message: pipe message
 * 
 * The task UI process will do:
 * 1. prompt input from user.
 * 2. put number of commands into pipe.
 * 3. put commands into pipe in form of {len(cmd), cmd}. 
 */
STATUS MsgCollector(IN int* message);

/**
 * @brief MessageParser
 * 
 * @param message: pipe message
 * @param numberOfEntries: the number of entries user input
 * @param commands_out: pass command strings to main process
 * 
 * The function will parse message in pipe and return command strings to main process.
 */
STATUS MessageParser(IN int* message, IN int* numberOfEntries, OUT char*** commands_out);

/**
 * @brief WaitStatusChecker
 * 
 * @param wstatus: wstatus
 * 
 * The function will report exit code of command in exec() in child process.
 */
STATUS WaitStatusChecker(IN int wstatus);

/**
 * @brief CommandParserWithoutFile
 * 
 * @param commands: a string of command including parameters 
 * @param args: a string array of command and command args
 * @param size_o: size of args
 * 
 * The function will extract command and parameters from string and pass it back with args.
 */
STATUS CommandParserWithoutFile(IN const char* commands, OUT char*** args, OUT int* size_o);

/**
 * @brief CommandParserWithFile
 * 
 * @param commands: a string of command including parameters
 * @param file: file string
 * @param args: a string array of command and command args
 * @param size_o: size of args
 * 
 * The function will extract command and parameters from string and pass it back with args.
 */
STATUS CommandParserWithFile(IN const char* commands, IN const char* file, OUT char*** args, OUT int* size_o);

/**
 * @brief CommandParser
 * 
 * A router to two kinds of command parser, with or without file.
 */
STATUS CommandParser(IN const char* commands, IN const char* file, IN char*** args, OUT int* size_o);

/**
 * @brief Worker
 * 
 * @param command: raw command string received from main process 
 * @param file: target file, nullptr if empty
 * @param time_pipe: used for tranfer time information between main process and child process
 * 
 * The function is responsible for executing given command and cache result.
 * 1. parse given command.
 * 2. redirect output.
 * 3. create a new process and execute command with execvp.
 */
STATUS Worker(IN const char* command, IN const char* file, IN int order);

/**
 * @brief Reporter
 * 
 * @param jobQueue: job with process id in order
 * @param statusQueue: status code responding to jobQueue
 * @param runtimeMain: run time for main process
 * @param file: target file
 * @return STATUS: 0 for success
 * 
 * The function will generate summary report.
 * 1. detailed report is generated by a new process.
 * 2. summary is written to stdout.
 */
STATUS Reporter(int* jobQueue, int* statusQueue, double runtimeMain, char* file);

/**
 * @brief Cleaner
 * 
 * @param jobQueue: jobs with process ID in order 
 * @return STATUS: 0 for success
 * 
 * The function will clean cache file generated by worker processes
 */
STATUS Cleaner(int* jobQueue);

/**
 * @brief isCommandWithTarget
 * 
 * @param command: command to test
 * @return int: true if it is
 */
int isCommandWithTarget(const char* command);

#endif // MASH_H